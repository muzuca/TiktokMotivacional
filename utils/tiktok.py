# utils/tiktok.py
import os
import re
import time
import shutil
import logging
from datetime import datetime, timedelta
from typing import Optional
from socket import error as SocketError

from selenium.common.exceptions import NoSuchElementException, TimeoutException, WebDriverException

# Uploader local
from .tiktok_uploader.upload import upload_video

# Pa√≠ses / cookies / diret√≥rios centralizados
from .countries import (
    normalize_lang, cookies_path_for, tiktok_headless_default,
)

# (opcional) cache_store para registrar frases j√° usadas por idioma
try:
    from cache_store import cache
except Exception:  # pragma: no cover
    cache = None

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

PASTA_VIDEOS  = "videos"
PASTA_IMAGENS = "imagens"
PASTA_AUDIOS  = "audios"
PASTA_CACHE   = os.getenv("CACHE_DIR", "cache")

# Controla remo√ß√£o de markdown na descri√ß√£o
_STRIP_FLAG = os.getenv("STRIP_MARKDOWN_IN_DESC", "1").strip().lower()
STRIP_MARKDOWN_IN_DESC = _STRIP_FLAG not in ("0", "false", "no", "off")

_HASHTAG_RE = re.compile(r'(?<!\S)#([^\s#]+)', flags=re.UNICODE)

def _dedupe_hashtags_in_desc(desc: str, max_n: Optional[int] = None) -> str:
    if not desc:
        return ""
    tags = ["#" + m.group(1) for m in _HASHTAG_RE.finditer(desc)]
    seen = set()
    ordered = []
    for t in tags:
        k = t.lower()
        if k not in seen and len(t) > 1:
            seen.add(k)
            ordered.append(t)
    if isinstance(max_n, int) and max_n >= 0:
        ordered = ordered[:max_n]
    base = _HASHTAG_RE.sub("", desc)
    base = re.sub(r"\s{2,}", " ", base).strip()
    return (base + " " + " ".join(ordered)).strip() if ordered else base

def _safe_remove(path: str) -> None:
    try:
        if os.path.isdir(path):
            shutil.rmtree(path, ignore_errors=True)
            logger.info("üóëÔ∏è Pasta removida: %s", path)
        elif os.path.isfile(path):
            os.remove(path)
            logger.info("üóëÔ∏è Arquivo removido: %s", path)
    except Exception as e:
        logger.debug("N√£o consegui remover %s (%s)", path, e)

def _cleanup_cache_drawtext(cache_dir: str) -> None:
    try:
        if not os.path.isdir(cache_dir): return
        for f in os.listdir(cache_dir):
            if f.startswith("drawtext_") and f.endswith(".txt"):
                _safe_remove(os.path.join(cache_dir, f))
            elif f.startswith("title_overlay_") and f.endswith(".png"):
                _safe_remove(os.path.join(cache_dir, f))
            elif f == "last_filter.txt":
                _safe_remove(os.path.join(cache_dir, f))
    except Exception as e:
        logger.debug("Falha limpando tempor√°rios do cache (%s): %s", cache_dir, e)

def _cleanup_mid_artifacts() -> None:
    """Limpa imagens/, audios/ (inclui tts/) e tempor√°rios do cache."""
    try:
        # imagens/*
        if os.path.isdir(PASTA_IMAGENS):
            for f in os.listdir(PASTA_IMAGENS):
                _safe_remove(os.path.join(PASTA_IMAGENS, f))

        # audios/* e audios/tts/*
        if os.path.isdir(PASTA_AUDIOS):
            for root, dirs, files in os.walk(PASTA_AUDIOS, topdown=False):
                for name in files:
                    if any(name.lower().endswith(ext) for ext in (".mp3", ".wav", ".m4a", ".aac", ".flac", ".ogg")):
                        _safe_remove(os.path.join(root, name))
                # remove pastas vazias
                for d in dirs:
                    try:
                        full = os.path.join(root, d)
                        if not os.listdir(full):
                            _safe_remove(full)
                    except Exception:
                        pass

        # cache tempor√°rios
        _cleanup_cache_drawtext(PASTA_CACHE)
    except Exception as e:
        logger.debug("Falha na limpeza intermedi√°ria: %s", e)

def _cleanup_prompts_and_video(video_path: Optional[str]) -> None:
    """Ap√≥s post, remove videos/prompts e o pr√≥prio v√≠deo postado."""
    try:
        prompts_dir = os.path.join(PASTA_VIDEOS, "prompts")
        if os.path.isdir(prompts_dir):
            _safe_remove(prompts_dir)
        if video_path and os.path.isfile(video_path):
            _safe_remove(video_path)
        _cleanup_mid_artifacts()
    except Exception as e:
        logger.debug("Falha limpando prompts/v√≠deo: %s", e)

def _strip_markdown(texto: str) -> str:
    patterns = (
        (re.compile(r"\*\*(.+?)\*\*", re.DOTALL), r"\1"),
        (re.compile(r"\*(.+?)\*",     re.DOTALL), r"\1"),
        (re.compile(r"__(.+?)__",     re.DOTALL), r"\1"),
        (re.compile(r"_(.+?)_",       re.DOTALL), r"\1"),
        (re.compile(r"~~(.+?)~~",     re.DOTALL), r"\1"),
        (re.compile(r"`([^`]+)`",     re.DOTALL), r"\1"),
    )
    s = (texto or "")
    for pat, rep in patterns:
        s = pat.sub(rep, s)
    s = s.replace("‚Äú", "\"").replace("‚Äù", "\"").replace("‚Äô", "'")
    s = re.sub(r"\s{2,}", " ", s)
    return s.strip()

def obter_ultimo_video(pasta=PASTA_VIDEOS) -> Optional[str]:
    try:
        arquivos = [os.path.join(pasta, f) for f in os.listdir(pasta) if f.endswith(".mp4")]
        if not arquivos:
            raise FileNotFoundError(f"‚ùå Nenhum v√≠deo novo encontrado em {pasta}.")
        ultimo_video = max(arquivos, key=os.path.getmtime)
        logger.info("üìπ √öltimo v√≠deo encontrado: %s", ultimo_video)
        return ultimo_video
    except Exception as e:
        logger.error("‚ùå Erro ao buscar √∫ltimo v√≠deo: %s", str(e))
        return None

def postar_no_tiktok_e_renomear(
    descricao_personalizada: Optional[str] = None,
    imagem_base: Optional[str] = None,
    imagem_final: Optional[str] = None,
    video_final: Optional[str] = None,
    agendar: bool = False,
    idioma: str = "en",
) -> bool:
    """
    Posta o √∫ltimo v√≠deo gerado (ou 'video_final' se informado) e,
    ap√≥s sucesso, faz a faxina (imagens/, audios/, cache temp, videos/prompts/ e o mp4 postado).
    """
    lang = normalize_lang(idioma)
    logger.info("postar_no_tiktok_e_renomear: idioma_in=%s | idioma_norm=%s", idioma, lang)

    video_path = video_final if video_final else obter_ultimo_video()
    if not video_path:
        return False
    try:
        if os.path.getsize(video_path) <= 0:
            logger.error("‚ùå V√≠deo est√° com 0 bytes: %s", video_path)
            return False
    except Exception:
        pass

    # Cookies por pa√≠s (resolvidos para COOKIES_DIR)
    COOKIES_PATH = cookies_path_for(lang)
    logger.info("üç™ Cookies utilizados: %s", COOKIES_PATH)
    if not os.path.exists(COOKIES_PATH):
        logger.error("‚ùå Arquivo de cookies n√£o encontrado: %s", COOKIES_PATH)
        return False

    try:
        # Descri√ß√£o base por idioma
        if descricao_personalizada:
            base_desc = descricao_personalizada
        else:
            if lang == "pt-br":
                base_desc = "Conte√∫do motivacional do dia!"
            elif lang == "ar":
                base_desc = "ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸäŸàŸÖ ‚ú®"
            elif lang == "ru":
                base_desc = "–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–Ω—è!"
            else:
                base_desc = "Motivational content of the day!"

        # Limpa markdown e dedup hashtags
        if STRIP_MARKDOWN_IN_DESC:
            base_desc = _strip_markdown(base_desc)
        description = _dedupe_hashtags_in_desc(base_desc)

        # grava no cache por idioma (para evitar repeti√ß√£o pelo LLM no futuro)
        if cache:
            try:
                cache.add("used_phrases", description, lang=lang)
            except Exception:
                pass

        schedule = None
        if agendar:
            schedule = datetime.now() + timedelta(minutes=20)
            logger.info("üìÖ Agendando post para: %s", schedule.strftime("%H:%M:%S"))

        tt_headless = tiktok_headless_default()
        logger.info("üåê TikTok headless: %s", "ON" if tt_headless else "OFF")

        logger.info("üöÄ Postando v√≠deo no TikTok: %s", video_path)
        logger.info("üìù Descri√ß√£o final: %s", description)
        time.sleep(1.0)

        upload_video(
            filename=video_path,
            description=description,
            cookies=COOKIES_PATH,
            comment=True,
            stitch=True,
            duet=True,
            headless=tt_headless,
            schedule=schedule,
            idioma=lang,
        )

        # P√ìS-POST: limpeza
        if imagem_base and os.path.exists(imagem_base):
            _safe_remove(imagem_base)
        if imagem_final and os.path.exists(imagem_final):
            _safe_remove(imagem_final)
        if video_final and os.path.exists(video_final):
            _safe_remove(video_final)

        _cleanup_mid_artifacts()
        _cleanup_prompts_and_video(video_path)

        return True

    except (NoSuchElementException, TimeoutException) as e:
        logger.warning("‚ö†Ô∏è Erro intermedi√°rio durante upload: %s", e)
        return False
    except SocketError as e:
        if getattr(e, "errno", None) == 10054:
            logger.warning("‚ö†Ô∏è Conex√£o resetada (10054). Pode ter conclu√≠do, mas n√£o confirmamos. Mantendo arquivos locais.")
            return False
        logger.error("‚ùå Erro de socket inesperado: %s", e)
        return False
    except WebDriverException as e:
        logger.error("‚ùå Erro no WebDriver durante upload: %s", e)
        return False
    except Exception as e:
        logger.error("‚ùå Erro geral ao postar: %s", e)
        return False
