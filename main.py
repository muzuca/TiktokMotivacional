import os
from utils.frase import gerar_prompt_paisagem, gerar_frase_motivacional, gerar_slug
from utils.imagem import gerar_imagem_com_frase, escrever_frase_na_imagem
from utils.video import gerar_video
from utils.tiktok import postar_no_tiktok_e_renomear  # Novo import para upload no TikTok
import logging

# Nova escolha de idioma/pa√≠s no in√≠cio
print("\nEscolha o pa√≠s para refer√™ncia da l√≠ngua das mensagens:")
print("1. EUA (Ingl√™s) *padr√£o")
print("2. Brasil (pt-br)")
idioma = input("Digite o n√∫mero da op√ß√£o (1 ou 2): ")
if idioma not in ['1', '2']:
    print("Op√ß√£o inv√°lida! Usando EUA (Ingl√™s) como padr√£o.")
    idioma = '1'
idioma = 'en' if idioma == '1' else 'pt-br'

def verificar_videos_pendentes(pasta="videos"):
    """
    Verifica se h√° v√≠deos criados na pasta.
    Retorna True se houver v√≠deos (pendentes ou n√£o), False se n√£o.
    """
    try:
        arquivos = [f for f in os.listdir(pasta) if f.endswith(".mp4")]
        if arquivos:
            logger.info(f"‚ö†Ô∏è V√≠deos encontrados: {', '.join(arquivos)}")
            logger.info("Pulando gera√ß√£o de novo conte√∫do e postando o √∫ltimo.")
            return True  # H√° v√≠deos
        return False  # Nenhum v√≠deo
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar v√≠deos: {e}")
        return False

def rotina():
    pendentes = verificar_videos_pendentes()

    if not pendentes:
        # Garantir que as pastas existam
        os.makedirs("imagens", exist_ok=True)
        os.makedirs("videos", exist_ok=True)
        os.makedirs("audios", exist_ok=True)  # Garantir que a pasta de √°udios exista

        # Gerar prompt e frase
        prompt_imagem = gerar_prompt_paisagem(idioma)
        frase = gerar_frase_motivacional(idioma)

        # Slugs para nome de arquivos
        slug_imagem = gerar_slug(prompt_imagem)
        slug_frase = gerar_slug(frase)
        imagem_base = f"imagens/{slug_imagem}.jpg"
        imagem_final = f"imagens/{slug_frase}.jpg"
        video_final = f"videos/{slug_frase}.mp4"

        # Gerar imagem com IA ou Pexels (ver vari√°vel no imagem.py)
        gerar_imagem_com_frase(prompt=prompt_imagem, arquivo_saida=imagem_base)

        # Escrever frase na imagem
        escrever_frase_na_imagem(imagem_base, frase, imagem_final)

        # Criar v√≠deo com m√∫sica
        gerar_video(imagem_final, video_final)

        # Postar no TikTok, passando os caminhos dos arquivos
        postar_no_tiktok_e_renomear(descricao_personalizada=frase, imagem_base=imagem_base, imagem_final=imagem_final, video_final=video_final)

    else:
        # Para v√≠deos existentes, usar o √∫ltimo v√≠deo e uma descri√ß√£o padr√£o
        video_path = obter_ultimo_video()
        if video_path:
            postar_no_tiktok_e_renomear(descricao_personalizada="Conte√∫do motivacional pendente! #Motivacao #Inspiracao #TikTokMotivacional", video_final=video_path)

    logger.info("‚úÖ Tudo pronto!")

def obter_ultimo_video(pasta="videos"):
    """
    Encontra o v√≠deo mais recente na pasta de v√≠deos (baseado na data de modifica√ß√£o).
    """
    try:
        arquivos = [os.path.join(pasta, f) for f in os.listdir(pasta) if f.endswith(".mp4")]
        if not arquivos:
            raise FileNotFoundError(f"‚ùå Nenhum v√≠deo encontrado em {pasta}.")
        
        ultimo_video = max(arquivos, key=os.path.getmtime)
        logger.info("üìπ √öltimo v√≠deo encontrado: %s", ultimo_video)
        return ultimo_video
    except Exception as e:
        logger.error("‚ùå Erro ao buscar √∫ltimo v√≠deo: %s", str(e))
        return None

# Configura√ß√£o do logging com timestamps (movida para o in√≠cio)
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

if __name__ == "__main__":
    rotina()